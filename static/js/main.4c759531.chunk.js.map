{"version":3,"sources":["assets/back.svg","assets/forward.svg","assets/social-icons/facebook.svg","assets/social-icons/gmail.svg","components/TextInput.js","components/Button.js","views/start/Start.js","views/calendar/Calendar.js","components/Toggle.js","Theme.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TextInput","id","label","cur","set","filled","className","type","value","onChange","e","target","htmlFor","nothing","IconButton","name","icon","onclick","onClick","alt","src","Button","children","text","spanned","i","length","push","key","charAt","spanify","Login","FacebookIcon","GmailIcon","to","User","setName","Back","Forward","Plan","plan","setPlan","useState","complete","val","bind","Start","initialEntries","initialIndex","exact","stric","path","component","render","Calendar","toggle","checked","icons","setp","attr","document","documentElement","style","setProperty","Theme","dark","getElementById","href","App","toggleDark","useEffect","strict","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4c759531.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/back.5434740c.svg\";","module.exports = __webpack_public_path__ + \"static/media/forward.11ea5efb.svg\";","module.exports = __webpack_public_path__ + \"static/media/facebook.3761dcba.svg\";","module.exports = __webpack_public_path__ + \"static/media/gmail.2382b9b0.svg\";","import React from 'react';\nimport './styles/TextInput.scss';\n\nconst TextInput = ({id, label, cur, set}) => {\n\n    let filled = cur !== \"\" ? \" filled\" : \"\";\n\n    return (\n        <form className={\"\" + filled}>\n            <input\n                className=\"\"\n                type=\"text\"\n                id={id}\n                value={cur}\n                onChange={e => set(e.target.value)}\n            />\n            <label className=\"\" htmlFor={id}>\n                <span className=\"\">{label}</span>\n            </label>\n        </form>\n    );\n}\n\nexport default TextInput;","import React from 'react';\nimport './styles/Button.scss';\n\nconst nothing = () => { return; }\n\nconst spanify = ( text ) => {\n    let spanned = [];\n    for (let i = 0; i < text.length; i++) {\n        spanned.push( <span key={i}>{text.charAt(i)}</span>);\n    }\n    return spanned;\n}\n\nconst Button = ({name, children, icon, onclick=nothing} ) => {\n    return (\n        <button className=\"button long\">\n            <div className=\"button-content\">\n                <div className=\"button-text long\">\n                    {spanify(children)}\n                </div>\n            </div>\n        </button>\n    );\n}\nexport const IconButton = ({name, icon, onclick=nothing} ) => {\n    return (\n        <button className=\"button short\"  onClick={onclick}>\n            <div className=\"button-content\">\n                <div className=\"button-text long\">\n                    <img className=\"button--icon\" alt={name} src={icon} />\n                </div>\n            </div>\n        </button>\n    );\n}\n\nexport default Button;","import React, {useState} from 'react';\nimport { MemoryRouter as Router, Route, Link} from 'react-router-dom';\nimport TextInput from '../../components/TextInput';\nimport Button, {IconButton} from '../../components/Button';\nimport FacebookIcon from '../../assets/social-icons/facebook.svg';\nimport GmailIcon from '../../assets/social-icons/gmail.svg';\nimport Back from '../../assets/back.svg';\nimport Forward from '../../assets/forward.svg';\nimport './styles/Start.css';\n\nconst Start = () => {\n    const [name, setName] = useState('');\n    const [plan, setPlan] = useState({\n        'planname': '',\n        'startDate': '',\n        'endDate': '',\n        'startTime': '',\n        'endTime': '',\n    });\n\n    return (\n        <div className=\"start-wrapper\">\n            <div className=\"start-info--wrapper\">\n                <div className=\"start-info--title\">\n                    M Y M O\n                </div>\n            </div>\n            <Router initialEntries={[ '/', '/user', '/plan' ]} initialIndex={0}>\n                <div className=\"start-form--wrapper\">\n                    <Route exact stric path='/' component={Login} />\n                    <Route path='/user' render={() => <User name={name} setName={setName} />} /> \n                    <Route path='/plan' render={() => <Plan plan={plan} setPlan={setPlan} />} />\n                </div>\n            </Router>\n        </div>\n    );\n}\n\nconst Login = () => {\n    return (\n        <div className=\"start--user\">\n            <span>Login with:</span>\n            <div className=\"start-button--wrapper\">\n                <IconButton name=\"Facebook\" icon={FacebookIcon} />\n                <IconButton name=\"Gmail\" icon={GmailIcon} />\n            </div>\n            <span> - or - </span>\n            <div className=\"start-anonymous--padding\">\n                <Link to='/user'>\n                    <Button>\n                        Sign in as Guest\n                    </Button>\n                </Link>\n            </div>\n        </div>\n    );\n}\nconst User = ({name, setName}) => {\n    return (\n        <div className=\"start--user\">\n            <TextInput id=\"user-display\" label=\"Display Name\" cur={name} set={setName} />\n            <div className=\"start-form-user--navigation\">\n                <div>\n                    <Link to='/'>\n                        <IconButton name=\"Back\" icon={Back} />\n                    </Link>\n                </div>\n                <div className={name.length ? \"show\" : \"hide\"}>\n                    <Link to='/plan'>\n                        <IconButton name=\"Forward\" icon={Forward} />\n                    </Link>\n                </div>\n            </div>\n        </div>\n    );\n}\nconst Plan = ({plan, setPlan}) => {\n    let [complete] = useState(true);\n    let setValue = (key, val) => {\n        setPlan({\n            ...plan,\n            key: val\n        });\n    }\n\n    return (\n        <div className=\"start--user\">\n            <TextInput id=\"planname\" label=\"Plan Name\" cur={plan} set={setValue.bind(null, 'planname')} />\n            <div className=\"start-form-user--navigation\">\n                <div>\n                    <Link to='/'>\n                        <IconButton name=\"Back\" icon={Back} />\n                    </Link>\n                </div>\n                <div className={complete ? \"show\" : \"hide\"}>\n                    <Link to='/'>\n                        <IconButton name=\"Forward\" icon={Forward} />\n                    </Link>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\nexport default Start;","import React from 'react';\n\nconst Calendar = () => {\n    return (\n        <div> THIS IS LIBRARY! </div>\n    );\n}\n\nexport default Calendar;","import React from 'react';\nimport Toggle from 'react-toggle';\nimport './styles/Toggle.css';\n\nconst toggle = ({cur, set}) => {\n    return (\n        <label>\n            <Toggle\n                checked={cur}\n                icons={false}\n                onChange={set.bind(null, !cur)}\n            />\n        </label>\n    );\n}\n\nexport default toggle;","let setp = ( attr, val ) => { document.documentElement.style.setProperty(attr, val) }\n\nconst Theme = ( dark ) => {\n    if(dark){\n        setp('--dark-mode', '1'); // on\n        setp('--text-color-1', '#FFFFFF'); // white\n        setp('--text-color-2', '#63539b'); // medium purple\n        setp('--text-color-3', '#FFFFFF'); // white\n        setp('--text-color-4', '#FFFFFF'); // white\n        setp('--text-color-5', '#5726ff'); // accent purple\n        setp('--logo', `url('/assets/calendar-dark.svg')`);\n        setp('--dark-accent', '#200F3D');  // dark purple\n        setp('--light-accent', '#FF78F2'); // light pink\n        setp('--bg-1', '#FFFFFF');         // white\n        setp('--background-color', '#5ac5b3e6'); //semi transparent purple\n        setp('--background-highlight', '#5ac5b3e6');\n        setp('--darker-background-color', '#63539bcc');\n        setp('--background-gradient', 'linear-gradient(230deg, #33685f, #413766)');\n        document.getElementById('favicon').href = '/assets/calendar-dark.svg'; // change favicon based on theme\n    }else{\n        setp('--dark-mode', '0'); // off\n        setp('--text-color-1', '#FFFFFF'); // white\n        setp('--text-color-2', '#FF6363'); // salmon\n        setp('--text-color-3', '#FF7B7B'); // light salmon\n        setp('--text-color-4', '#FFF8DF'); // off white\n        setp('--text-color-5', '#FF6363'); // accent salmon\n        setp('--logo', `url('/assets/calendar-light.svg')`);\n        setp('--dark-accent', '#FF7B7B');  // light salmon\n        setp('--light-accent', '#FF00FF'); // hot pink\n        setp('--bg-1', '#FFFFFF');\n        setp('--background-color', '#FFF8DFe6');\n        setp('--darker-background-color', '#FFABAB');\n        setp('--background-gradient', 'linear-gradient(230deg, #FFF8DF, #FF7B7B)');\n        document.getElementById('favicon').href = '/assets/calendar-light.svg'; // change favicon based on theme\n    }\n}\n\nexport default Theme;","import React, {useState, useEffect} from 'react';\nimport { Route } from 'react-router-dom';\nimport Start from './views/start/Start';\nimport Calendar from './views/calendar/Calendar';  \nimport Toggle from './components/Toggle';     \nimport Theme from './Theme'; \nimport './App.css';\n\nconst App = () => {\n    const [dark, toggleDark] = useState(true);\n\n    useEffect(() => {\n        Theme(dark);\n    }, [dark]);\n\n    return (\n        <div className=\"site-wrapper\">\n            <div className=\"site-mode--toggle\">\n                <Toggle cur={dark} set={toggleDark}/>\n            </div>  \n            <Route strict exact path=\"/\">\n                <Start />\n            </Route>\n            <Route path=\"/room\">\n                <Calendar />\n            </Route>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}