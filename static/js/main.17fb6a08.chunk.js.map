{"version":3,"sources":["assets/social-icons/facebook.svg","assets/social-icons/gmail.svg","assets/back.svg","assets/forward.svg","components/TextInput.js","components/IconButton.js","views/start/Start.js","views/calendar/Calendar.js","components/Toggle.js","Theme.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TextInput","id","label","cur","set","filled","className","type","value","onChange","e","target","htmlFor","IconButton","name","icon","onclick","onClick","alt","src","Login","FacebookIcon","GmailIcon","to","User","useState","displayName","setDisplayName","Back","length","Forward","Start","initialEntries","initialIndex","exact","stric","path","component","Calendar","toggle","checked","icons","bind","Theme","dark","root","document","documentElement","style","setProperty","App","toggleDark","useEffect","strict","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17fb6a08.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/facebook.3761dcba.svg\";","module.exports = __webpack_public_path__ + \"static/media/gmail.2382b9b0.svg\";","module.exports = __webpack_public_path__ + \"static/media/back.5434740c.svg\";","module.exports = __webpack_public_path__ + \"static/media/forward.11ea5efb.svg\";","import React from 'react';\nimport './styles/TextInput.css';\n\nconst TextInput = ({id, label, cur, set}) => {\n\n    let filled = cur !== \"\" ? \" input--filled\" : \"\";\n\n    return (\n        <span className={\"input input--jiro\" + filled}>\n            <input className=\"input__field input__field--jiro\"\n                type=\"text\"\n                id={id}\n                value={cur}\n                onChange={e => set(e.target.value)}\n            />\n            <label className=\"input__label input__label--jiro\" htmlFor={id}>\n                <span className=\"input__label-content input__label-content--jiro\">{label}</span>\n            </label>\n        </span>\n    );\n}\n\nexport default TextInput;","import React from 'react';\nimport './styles/IconButton.css';\n\nconst IconButton = ({name, icon, onclick=()=>{return;} }) => {\n    return (\n        <button className=\"button button--sacnite\" onClick={onclick}>\n            <img className=\"button__icon\" alt=\"Facebook\" src={icon} />\n            <span>{name}</span>\n        </button>\n    );\n}\n\nexport default IconButton;","import React, {useState} from 'react';\nimport { MemoryRouter as Router, Route, Link} from 'react-router-dom';\nimport TextInput from '../../components/TextInput';\nimport IconButton from '../../components/IconButton';\nimport FacebookIcon from '../../assets/social-icons/facebook.svg';\nimport GmailIcon from '../../assets/social-icons/gmail.svg';\nimport Back from '../../assets/back.svg';\nimport Forward from '../../assets/forward.svg';\nimport './styles/Start.css';\n\nconst Start = () => {\n    return (\n        <div className=\"start-wrapper\">\n            <div className=\"start-info--wrapper\">\n                <div className=\"start-info--title\">\n                    M Y M O\n                </div>\n            </div>\n            <Router initialEntries={[ '/', '/user', '/plan' ]} initialIndex={1}>\n                <Route exact stric path='/' component={Login} />\n                <Route path='/user' component={User} />\n                <Route path='/plan' component={Login} />\n            </Router>\n        </div>\n    );\n}\nconst Login = () => {\n    return (\n        <div className=\"start-form--wrapper\">\n            <span>Login with:</span>\n            <div className=\"start-button--wrapper\">\n                <IconButton name=\"Facebook\" icon={FacebookIcon} />\n                <IconButton name=\"Gmail\" icon={GmailIcon} />\n            </div>\n            <span> - or -</span>\n            <div className=\"start-anonymous--padding\">\n                <Link to='/user'>\n                    <div className=\"button-long button--sacnite\">\n                        <div className=\"button--text\">\n                            Sign in as Guest\n                        </div>\n                    </div>\n                </Link>\n            </div>\n        </div>\n    );\n}\nconst User = () => {\n    const [displayName, setDisplayName] = useState(\"\");\n    return (\n        <div className=\"start-form--wrapper\">\n            <TextInput id=\"user-display\" label=\"Display Name\" cur={displayName} set={setDisplayName} />\n            <div>\n                <div>\n                    <Link to='/'>\n                        <IconButton name=\"Back\" icon={Back} />\n                    </Link>\n                </div>\n                <div className={displayName.length ? \"show\" : \"hide\"}>\n                    <Link to='/'>\n                        <IconButton name=\"Forward\" icon={Forward} />\n                    </Link>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\nexport default Start;","import React from 'react';\n\nconst Calendar = () => {\n    return (\n        <div> THIS IS LIBRARY! </div>\n    );\n}\n\nexport default Calendar;","import React from 'react';\nimport Toggle from 'react-toggle';\nimport './styles/Toggle.css';\n\nconst toggle = ({cur, set}) => {\n    return (\n        <label>\n            <Toggle\n                checked={cur}\n                icons={false}\n                onChange={set.bind(null, !cur)}\n            />\n        </label>\n    );\n}\n\nexport default toggle;","const Theme = ( dark ) => {\n    let root = document.documentElement.style;\n    if(dark){\n        root.setProperty('--text-color-1', '#FFFFFF');\n        root.setProperty('--text-color-2', '#200F3D;');\n        root.setProperty('--logo', `url('/assets/calendar-dark.svg')`);\n        root.setProperty('--highlight', '#151515');\n        root.setProperty('--background-color', '#5ac5b3e6');\n        root.setProperty('--background-highlight', '#5ac5b3e6');\n        root.setProperty('--darker-background-color', '#63539bcc');\n        root.setProperty('--background-gradient', 'linear-gradient(230deg, #33685f, #413766)');\n    }else{\n        root.setProperty('--text-color-1', '#151515');\n        root.setProperty('--text-color-2', '#FFFFFF');\n        root.setProperty('--logo', `url('/assets/calendar-light.svg')`);\n        root.setProperty('--highlight', '#FF7B7B');\n        root.setProperty('--background-color', '#FFF8DFe6');\n        root.setProperty('--darker-background-color', '#ffabab');\n        root.setProperty('--background-gradient', 'linear-gradient(230deg, #FFF8DF, #FF7B7B)');\n    }\n}\nexport default Theme;","import React, {useState, useEffect} from 'react';\nimport { Route } from 'react-router-dom';\nimport Start from './views/start/Start';\nimport Calendar from './views/calendar/Calendar';  \nimport Toggle from './components/Toggle';     \nimport Theme from './Theme'; \nimport './App.css';\n\nconst App = () => {\n    const [dark, toggleDark] = useState(true);\n\n    useEffect(() => {\n        Theme(dark);\n    }, [dark]);\n\n    return (\n        <div className=\"site-wrapper\">\n            <div className=\"site-mode--toggle\">\n                <Toggle cur={dark} set={toggleDark}/>\n            </div>  \n            <Route strict exact path=\"/\">\n                <Start />\n            </Route>\n            <Route path=\"/room\">\n                <Calendar />\n            </Route>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}